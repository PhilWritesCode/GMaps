// Generated by CoffeeScript 1.8.0
(function() {
  var meetupApp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  meetupApp = angular.module('meetupApp', ['AngularGM', 'ngGPlaces']);

  meetupApp.factory('locationService', function() {
    this.geocoder = new google.maps.Geocoder();
    this.searcher = new google.maps.places.PlacesService(document.getElementById('results'));
    this.processLocation = (function(_this) {
      return function(newLocation, centerOfSearchArea, addLocation) {
        return _this.geocoder.geocode({
          address: newLocation,
          location: centerOfSearchArea
        }, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            return addLocation(results[0]);
          } else {
            return alert("Failed!  Status: " + status);
          }
        });
      };
    })(this);
    this.performSearch = (function(_this) {
      return function(searchArea, searchTerm, displayResults) {
        return _this.searcher.textSearch({
          query: searchTerm,
          location: searchArea,
          radius: 5
        }, function(results, status, pagination) {
          console.log("callback!");
          if (status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
            alert('No results!');
            return;
          }
          return displayResults(results, pagination);
        });
      };
    })(this);
    this.getLocationDetails = (function(_this) {
      return function(locationReferenceId, addLocationDetails) {
        return _this.searcher.getDetails({
          placeId: locationReferenceId
        }, function(place, status) {
          if (status !== google.maps.places.PlacesServiceStatus.OK) {
            alert('Detail error!');
            return;
          }
          return addLocationDetails(place);
        });
      };
    })(this);
    return {
      processLocation: this.processLocation,
      performSearch: this.performSearch,
      getLocationDetails: this.getLocationDetails
    };
  });

  meetupApp.controller('MeetupController', function($scope, ngGPlacesAPI, locationService) {
    this.locationMarkers = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
    this.clickDisablingNodes = ['SELECT', 'A', 'INPUT'];
    this.locations = [];
    this.bounds = new google.maps.LatLngBounds();
    this.centerOfSearchArea;
    this.formEntry;
    this.searchTerm = "coffee";
    this.markerEvents;
    this.searchPages = [];
    this.searchPageIndex = 0;
    this.searchPaginationObject;
    this.test = function() {
      return console.log("test executed");
    };
    this.processFormEntry = function() {
      if (this.formEntry) {
        locationService.processLocation(this.formEntry, this.centerOfSearchArea, this.addLocation);
      }
      return this.formEntry = "";
    };
    this.locationAlreadyEntered = function(locationToCheck) {
      var location, _i, _len, _ref;
      _ref = this.locations;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        location = _ref[_i];
        if (location.formatted_address === locationToCheck.formatted_address) {
          return true;
        }
      }
      return false;
    };
    this.addLocation = (function(_this) {
      return function(newLocation) {
        if (!_this.locationAlreadyEntered(newLocation)) {
          _this.locations.push(newLocation);
          _this.updateMapLocations();
          _this.performSearch();
          return $scope.$apply();
        }
      };
    })(this);
    this.removeLocation = function(locationToRemove) {
      this.locations.splice(this.locations.indexOf(locationToRemove), 1);
      this.updateMapLocations();
      return this.performSearch();
    };
    this.updateMapLocations = (function(_this) {
      return function() {
        var location, _i, _len, _ref;
        if (_this.locations.length > 0) {
          _this.bounds = new google.maps.LatLngBounds();
          _ref = _this.locations;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            location = _ref[_i];
            _this.bounds.extend(location.geometry.location);
          }
        }
        return _this.centerOfSearchArea = _this.bounds.getCenter();
      };
    })(this);
    this.updateMapSearchResults = (function(_this) {
      return function() {
        var location, result, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (_this.getDisplayedResults().length > 0) {
          _this.bounds = new google.maps.LatLngBounds();
          _ref = _this.locations;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            location = _ref[_i];
            _this.bounds.extend(location.geometry.location);
          }
          _ref1 = _this.getDisplayedResults();
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            result = _ref1[_j];
            _results.push(_this.bounds.extend(result.geometry.location));
          }
          return _results;
        }
      };
    })(this);
    this.updateSearchArea = function(object, marker) {
      this.centerOfSearchArea = marker.getPosition();
      return this.performSearch();
    };
    this.performSearch = (function(_this) {
      return function() {
        _this.searchPages = [];
        _this.searchPageIndex = 0;
        if (!_this.searchTerm || _this.locations.length === 0) {
          return;
        }
        return locationService.performSearch(_this.centerOfSearchArea, _this.searchTerm, _this.displayResults);
      };
    })(this);
    this.displayResults = (function(_this) {
      return function(results, pagination) {
        _this.searchPaginationObject = pagination;
        _this.searchPages.push(results.slice(0, 10));
        _this.searchPages.push(results.slice(10));
        if (_this.searchPages.length > 2) {
          _this.searchPageIndex++;
        }
        _this.updateMapSearchResults();
        return $scope.$apply();
      };
    })(this);
    this.getDisplayedResults = function() {
      return this.searchPages[this.searchPageIndex];
    };
    this.addLocationDetail = (function(_this) {
      return function(place) {
        var result, _i, _len, _ref;
        _ref = _this.getDisplayedResults();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          result = _ref[_i];
          if (result.place_id === place.place_id) {
            result.reviews = place.reviews;
            result.formatted_phone_number = place.formatted_phone_number;
            result.url = place.url;
            result.website = place.website;
            result.opening_hours = place.opening_hours;
            break;
          }
        }
        $scope.$apply();
        return $scope.$broadcast('gmMarkersUpdate', 'meetup.getDisplayedResults()');
      };
    })(this);
    this.getMapLocationOptions = function(result) {
      return angular.extend(this.mapLocationOptions, {
        icon: "http://maps.google.com/mapfiles/marker_grey" + this.locationMarkers[this.locations.indexOf(result)] + ".png"
      });
    };
    this.getMapSearchAreaOptions = function() {
      if (this.locations.length > 0) {
        return this.mapSearchAreaOptions;
      } else {
        return this.mapHiddenMarkersOptions;
      }
    };
    this.getMapSearchResultsOptions = function(result) {
      return angular.extend(this.searchResultOptions, result.selected ? this.markerSelectedIcon : result.highlighted ? this.markerHighlightedIcon : this.markerDefaultIcon);
    };
    this.getLocationId = function(location) {
      return this.locationMarkers[this.locations.indexOf(location)];
    };
    this.getBaseUrl = function(fullUrl) {
      var urlParts;
      if (fullUrl) {
        urlParts = fullUrl.split('/');
        return urlParts[2];
      }
    };
    this.getHoursForToday = function(result) {
      var close, currentPeriod, dayIndex, open;
      dayIndex = new Date().getDay();
      if (result.opening_hours && result.opening_hours.periods) {
        currentPeriod = result.opening_hours.periods[dayIndex];
        if (currentPeriod) {
          open = this.formatHours(currentPeriod.open.hours) + ':' + this.formatMinutes(currentPeriod.open.minutes) + " " + this.getAMPM(currentPeriod.open.hours);
          close = this.formatHours(currentPeriod.close.hours) + ':' + this.formatMinutes(currentPeriod.close.minutes) + " " + this.getAMPM(currentPeriod.close.hours);
          return open + " - " + close;
        } else {
          return "Closed";
        }
      }
    };
    this.formatHours = function(rawHours) {
      if (rawHours < 13) {
        return rawHours;
      } else {
        return rawHours - 12;
      }
    };
    this.formatMinutes = function(rawMinutes) {
      if (rawMinutes > 10) {
        return rawMinutes;
      } else {
        return rawMinutes + "0";
      }
    };
    this.getAMPM = function(rawHours) {
      if (rawHours < 12) {
        return "am";
      } else {
        return "pm";
      }
    };
    this.selectResult = function(thisResult) {
      var result, _i, _len, _ref;
      if (thisResult.website === void 0) {
        locationService.getLocationDetails(thisResult.place_id, this.addLocationDetail);
      }
      _ref = this.getDisplayedResults();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        result = _ref[_i];
        result.selected = false;
      }
      thisResult.selected = true;
      return $scope.$broadcast('gmMarkersUpdate', 'meetup.getDisplayedResults()');
    };
    this.deSelectResult = function(thisResult) {
      thisResult.selected = false;
      return $scope.$broadcast('gmMarkersUpdate', 'meetup.getDisplayedResults()');
    };
    this.highlightResult = function(result) {
      result.highlighted = true;
      return $scope.$broadcast('gmMarkersUpdate', 'meetup.getDisplayedResults()');
    };
    this.unHighlightResult = function(result) {
      result.highlighted = false;
      return $scope.$broadcast('gmMarkersUpdate', 'meetup.getDisplayedResults()');
    };
    this.toggleSelection = function(result) {
      if (result.selected) {
        this.deSelectResult(result);
        return this.triggerCloseInfoWindow(result);
      } else {
        this.selectResult(result);
        return this.triggerOpenInfoWindow(result);
      }
    };
    this.handleTextEntryClicked = function(result, event) {
      var _ref;
      if (_ref = event.target.nodeName, __indexOf.call(this.clickDisablingNodes, _ref) >= 0) {

      } else {
        return this.toggleSelection(result);
      }
    };
    this.getDirections = function(fromLocation, toLocation) {
      var link;
      console.log("from " + fromLocation + " to " + toLocation);
      if (fromLocation && toLocation) {
        link = "http://maps.google.com/maps?saddr=" + fromLocation.formatted_address + "&daddr=" + toLocation.formatted_address;
        console.log(link);
        window.open(link, "_blank");
      }
      return true;
    };
    this.triggerOpenInfoWindow = function(result) {
      return this.markerEvents = [
        {
          event: 'openinfowindow',
          ids: ['result' + result.formatted_address]
        }
      ];
    };
    this.triggerCloseInfoWindow = function(result) {
      return this.markerEvents = [
        {
          event: 'closeinfowindow',
          ids: ['result' + result.formatted_address]
        }
      ];
    };
    this.getNormalizedAddress = function(location) {
      var address;
      if (location) {
        address = location.formatted_address;
        if (address.indexOf(", USA") > 0) {
          return address.substr(0, address.indexOf(", USA"));
        } else if (address.indexOf(", United States") > 0) {
          return address.substr(0, address.indexOf(", United States"));
        } else {
          return address;
        }
      }
    };
    this.nextPageAvailable = function() {
      return this.searchPages.length - 1 > this.searchPageIndex || this.searchPaginationObject.hasNextPage;
    };
    this.getSearchResultPageNumbers = function() {
      if (this.getDisplayedResults()) {
        return (this.searchPageIndex * 10 + 1) + " - " + (this.searchPageIndex * 10 + this.getDisplayedResults().length);
      }
    };
    this.getPreviousPage = function() {
      if (this.searchPageIndex > 0) {
        this.searchPageIndex--;
        return this.updateMapSearchResults();
      }
    };
    this.getNextPage = function() {
      if (this.searchPages.length - 1 > this.searchPageIndex) {
        this.searchPageIndex++;
        return this.updateMapSearchResults();
      } else if (this.searchPaginationObject.hasNextPage) {
        return this.searchPaginationObject.nextPage();
      }
    };
    this.markerSelectedIcon = {
      icon: 'https://maps.gstatic.com/mapfiles/ms2/micons/yellow-dot.png'
    };
    this.markerHighlightedIcon = {
      icon: 'http://labs.google.com/ridefinder/images/mm_20_yellow.png'
    };
    this.markerDefaultIcon = {
      icon: 'http://labs.google.com/ridefinder/images/mm_20_purple.png'
    };
    this.mapOptions = {
      map: {
        center: new google.maps.LatLng(39, -95),
        zoom: 4,
        mapTypeId: google.maps.MapTypeId.TERRAIN
      }
    };
    this.mapSearchAreaOptions = {
      visible: true,
      draggable: true,
      icon: "http://maps.google.com/mapfiles/arrow.png"
    };
    this.mapLocationOptions = {
      draggable: false
    };
    this.searchResultOptions = {
      draggable: false,
      clickable: true
    };
    return this.mapHiddenMarkersOptions = {
      visible: false
    };
  });

}).call(this);
