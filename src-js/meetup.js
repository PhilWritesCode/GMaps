// Generated by CoffeeScript 1.8.0
(function() {
  var gems, meetupApp,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  meetupApp = angular.module('meetupApp', ['AngularGM', 'ngGPlaces']);

  meetupApp.factory('locationService', function() {
    this.geocoder = new google.maps.Geocoder();
    this.searcher = new google.maps.places.PlacesService(document.getElementById('results'));
    this.processLocation = (function(_this) {
      return function(newLocation, startingLocation, addLocation) {
        return _this.geocoder.geocode({
          address: newLocation,
          location: startingLocation
        }, function(results, status) {
          if (status === google.maps.GeocoderStatus.OK) {
            return addLocation(results[0]);
          } else {
            return alert("Failed!  Status: " + status);
          }
        });
      };
    })(this);
    this.performSearch = (function(_this) {
      return function(searchArea, searchTerm, displayResults) {
        return _this.searcher.textSearch({
          query: searchTerm,
          location: searchArea,
          radius: 5
        }, function(results, status, pagination) {
          if (status === google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
            alert('No results!');
            return;
          }
          return displayResults(results);
        });
      };
    })(this);
    return {
      processLocation: this.processLocation,
      performSearch: this.performSearch
    };
  });

  meetupApp.controller('MeetupController', function($scope, ngGPlacesAPI, locationService) {
    this.products = gems;
    this.locations = [];
    this.bounds = new google.maps.LatLngBounds();
    this.centerOfSearchArea;
    this.searchResults;
    this.formEntry;
    this.usedEntries = [];
    this.searchTerm = "coffee";
    this.searchResults;
    this.processFormEntry = function() {
      var _ref;
      if (this.formEntry && (_ref = this.formEntry, __indexOf.call(this.usedEntries, _ref) < 0)) {
        locationService.processLocation(this.formEntry, this.centerOfSearchArea, this.addLocation);
        this.usedEntries.push(this.formEntry);
      }
      return this.formEntry = "";
    };
    this.addLocation = (function(_this) {
      return function(newLocation) {
        _this.locations.push(newLocation);
        _this.updateMapLocations();
        _this.performSearch();
        return $scope.$apply();
      };
    })(this);
    this.removeLocation = function(locationToRemove) {
      this.locations.pop(locationToRemove);
      this.usedEntries.pop(locationToRemove);
      this.updateMapLocations();
      return this.performSearch();
    };
    this.updateMapLocations = (function(_this) {
      return function() {
        var location, _i, _len, _ref;
        if (_this.locations.length > 0) {
          _this.bounds = new google.maps.LatLngBounds();
          _ref = _this.locations;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            location = _ref[_i];
            _this.bounds.extend(location.geometry.location);
          }
        }
        return _this.centerOfSearchArea = _this.bounds.getCenter();
      };
    })(this);
    this.updateMapSearchResults = (function(_this) {
      return function() {
        var location, result, _i, _j, _len, _len1, _ref, _ref1, _results;
        if (_this.searchResults.length > 0) {
          _this.bounds = new google.maps.LatLngBounds();
          _ref = _this.locations;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            location = _ref[_i];
            _this.bounds.extend(location.geometry.location);
          }
          _ref1 = _this.searchResults;
          _results = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            result = _ref1[_j];
            _results.push(_this.bounds.extend(result.geometry.location));
          }
          return _results;
        }
      };
    })(this);
    this.updateSearchArea = function(object, marker) {
      this.centerOfSearchArea = marker.getPosition();
      return this.performSearch();
    };
    this.performSearch = (function(_this) {
      return function() {
        if (!_this.searchTerm || _this.locations.length === 0) {
          _this.searchResults = [];
          return;
        }
        return locationService.performSearch(_this.centerOfSearchArea, _this.searchTerm, _this.displayResults);
      };
    })(this);
    this.displayResults = (function(_this) {
      return function(results) {
        _this.searchResults = results.slice(0, 10);
        _this.updateMapSearchResults();
        return $scope.$apply();
      };
    })(this);
    this.getMapSearchAreaOptions = function() {
      if (this.locations.length > 0) {
        return this.mapSearchAreaOptions;
      } else {
        return this.mapHiddenMarkersOptions;
      }
    };
    this.getMapSearchResultsOptions = function(result) {
      return angular.extend(this.searchResultOptions, result.selected ? this.markerSelectedIcon : this.markerNotSelectedIcon);
    };
    this.selectResult = function(result) {
      result.selected = true;
      return $scope.$broadcast('gmMarkersUpdate', 'meetup.searchResults');
    };
    this.deSelectResult = function(result) {
      result.selected = false;
      return $scope.$broadcast('gmMarkersUpdate', 'meetup.searchResults');
    };
    this.markerSelectedIcon = {
      icon: 'https://maps.gstatic.com/mapfiles/ms2/micons/yellow-dot.png'
    };
    this.markerNotSelectedIcon = {
      icon: 'https://maps.gstatic.com/mapfiles/ms2/micons/red-dot.png'
    };
    this.mapOptions = {
      map: {
        center: new google.maps.LatLng(39, -95),
        zoom: 4,
        mapTypeId: google.maps.MapTypeId.TERRAIN
      }
    };
    this.mapSearchAreaOptions = {
      visible: true,
      draggable: true,
      icon: "https://maps.google.com/mapfiles/ms/icons/green-dot.png"
    };
    this.mapLocationOptions = {
      draggable: false,
      icon: "https://maps.google.com/mapfiles/ms/icons/blue-dot.png"
    };
    this.searchResultOptions = {
      draggable: false,
      clickable: true
    };
    return this.mapHiddenMarkersOptions = {
      visible: false
    };
  });

  gems = [
    {
      name: 'Dodecahedron',
      price: 2.95,
      description: 'Here is some nonsensical description text',
      reviews: [],
      canPurchase: true,
      soldOut: true
    }, {
      name: 'Pentagonal Gem',
      price: 5.95,
      description: 'Different descriptive text',
      reviews: [],
      canPurchase: true,
      soldOut: false
    }, {
      name: 'Something new',
      price: 4.95,
      description: 'Poo dollar',
      reviews: [
        {
          stars: 5,
          body: "I love this product!",
          author: "phil@shutterfly.com"
        }
      ],
      canPurchase: true,
      soldOut: false
    }
  ];

  meetupApp.controller('PanelController', function() {
    this.tab = 1;
    this.selectTab = function(setTab) {
      return this.tab = setTab;
    };
    return this.isSelected = function(checkTab) {
      return this.tab === checkTab;
    };
  });

  meetupApp.controller('ReviewController', function() {
    this.review = {};
    return this.addReview = function(address) {
      address.reviews.push(this.review);
      return this.review = {};
    };
  });

}).call(this);
